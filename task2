import math

# Constants
HUMAN = 'O'
AI = 'X'
EMPTY = ' '

# Create the board
board = [[EMPTY for _ in range(3)] for _ in range(3)]

def print_board(board):
    for row in board:
        print('| ' + ' | '.join(row) + ' |')

def is_moves_left(board):
    return any(EMPTY in row for row in board)

def evaluate(b):
    # Row check
    for row in b:
        if row.count(AI) == 3:
            return +1
        if row.count(HUMAN) == 3:
            return -1

    # Column check
    for col in range(3):
        if [b[0][col], b[1][col], b[2][col]].count(AI) == 3:
            return +1
        if [b[0][col], b[1][col], b[2][col]].count(HUMAN) == 3:
            return -1

    # Diagonal check
    if [b[0][0], b[1][1], b[2][2]].count(AI) == 3:
        return +1
    if [b[0][0], b[1][1], b[2][2]].count(HUMAN) == 3:
        return -1
    if [b[0][2], b[1][1], b[2][0]].count(AI) == 3:
        return +1
    if [b[0][2], b[1][1], b[2][0]].count(HUMAN) == 3:
        return -1

    return 0

def minimax(board, depth, is_maximizing):
    score = evaluate(board)

    if score == 1 or score == -1:
        return score

    if not is_moves_left(board):
        return 0

    if is_maximizing:
        best = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = AI
                    best = max(best, minimax(board, depth + 1, False))
                    board[i][j] = EMPTY
        return best
    else:
        best = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = HUMAN
                    best = min(best, minimax(board, depth + 1, True))
                    board[i][j] = EMPTY
        return best

def find_best_move(board):
    best_val = -math.inf
    best_move = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = AI
                move_val = minimax(board, 0, False)
                board[i][j] = EMPTY
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
    return best_move

def play():
    print("Tic-Tac-Toe")
    print_board(board)

    while True:
        # Human move
        row = int(input("Enter row (0-2): "))
        col = int(input("Enter col (0-2): "))
        if board[row][col] != EMPTY:
            print("Invalid move, try again.")
            continue
        board[row][col] = HUMAN

        print_board(board)

        if evaluate(board) == -1:
            print("You win!")
            break
        if not is_moves_left(board):
            print("It's a draw!")
            break

        # AI move
        ai_move = find_best_move(board)
        board[ai_move[0]][ai_move[1]] = AI
        print("AI played:")
        print_board(board)

        if evaluate(board) == 1:
            print("AI wins!")
            break
        if not is_moves_left(board):
            print("It's a draw!")
            break

play()
